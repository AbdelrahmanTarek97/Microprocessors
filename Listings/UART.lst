C51 COMPILER V9.59.0.0   UART                                                              11/18/2018 13:45:02 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE UART
OBJECT MODULE PLACED IN .\Objects\UART.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE UART.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\UART
                    -.lst) TABS(2) OBJECT(.\Objects\UART.obj)

line level    source

   1          #include<reg51.h>
   2          #include <stdlib.h>
   3          
   4          void uart_init();       //Initialize UART
   5          void timer_init();      // Timer 2 in mode 2 used for initialization of UART
   6          void uart_tx(char x);   //Transmission function
   7          char uart_rx();         //Receiving function
   8          void uart_msg(char *p); //String transmission
   9          void wait4Letter(char x); // A method that waits until the desired letter is entered 
  10          void startTimer(); // Start the timer so the overFlows are calculated by the interrupts
  11          void endTimer(); // Stop the timer
  12          void Timer0_ISR(void); // A method that detects the interrupts in the timer
  13          void trainUserX(bit user); // A method that lets a certain user to enter .tie5Ronal five times
  14          void testingPhase(); // A method that enables any user to enter .tie5Ronal for testing 
  15          unsigned long getEuclideanDistance(bit user); // A method that gets the euclidean difference between a cer
             -atin user and the tested user
  16          
  17          unsigned overFlows = 0; // This is our unit time in the program. It is the difference between a key stroke
             - and another
  18          unsigned long xdata avg0[9] ; //store average keystrokes for user 0
  19          unsigned long xdata avg1[9];//store average keystrokes for user 1
  20          unsigned long xdata testingTimes[9]; //store testing time of random user
  21          unsigned char password  [10] = ".tie5Ronal";  //The password the users will enter
  22          unsigned long euclideanDistance0 = 0 ; // The euclidean distance between user 0 and the random user
  23          unsigned long euclideanDistance1 = 0 ;// The euclidean distance between user 1 and the random user
  24          
  25          sbit switch1 = P0^0; // Switch 1 which indicates whether we are in training(0) or testing(1) Phase
  26          sbit switch2 = P0^1; // Switch 2 which indicates whether user0(0) or user1(1) is entering the password now
             - (In Training phase)
  27          sbit led = P0^2; // The Led which indicates which user is the random user. Lights up 1 time means User 0, 
             -2 times means User 1
  28          
  29          void main(void){
  30   1        
  31   1      
  32   1        led = 0; // The Led is off at the begining
  33   1        
  34   1        // Initialize UART settings 
  35   1        uart_init();
  36   1        
  37   1        uart_msg("Set Switch 1 to Train(0) and Switch 2 to User 0 \n");
  38   1                
  39   1        while(switch1 != 0 || switch2 != 0); // Wait until the Switch 1 is 0 (Training Phase) and Switch 2 is 0 (
             -User 0)
  40   1            
  41   1        uart_msg("Training User 0 \n");
  42   1            
  43   1        trainUserX(0); // Train User 0
  44   1          
  45   1        uart_msg("Set Switch 1 to Train(0) and Switch 2 to User 1 \n");
  46   1                
  47   1        while(switch1 != 0 || switch2 != 1); // Wait until the Switch 1 is 0 (Training Phase) and Switch 2 is 0 (
             -User 1)
  48   1      
C51 COMPILER V9.59.0.0   UART                                                              11/18/2018 13:45:02 PAGE 2   

  49   1        uart_msg("training User 1 \n"); 
  50   1          
  51   1        trainUserX(1); // Train User 1
  52   1            
  53   1        uart_msg("Set Switch 1 to Test(1)  \n");
  54   1      
  55   1        while(switch1 != 1); // Wait until the Switch 1 is 1 (Testing Phase)
  56   1        
  57   1        
  58   1        while(1)
  59   1        {
  60   2          uart_msg("Testing, Enter the password \n"); 
  61   2          
  62   2          testingPhase(); // Testing random user
  63   2          
  64   2          euclideanDistance0 = getEuclideanDistance(0); // Get the Euclidean Distance between User 0 and Testing U
             -ser
  65   2          euclideanDistance1 = getEuclideanDistance(1); // Get the Euclidean Distance between User 1 and Testing U
             -ser
  66   2      
  67   2          if(euclideanDistance1 > euclideanDistance0){ // If Euclidean Distance of User 1 is bigger than User 0 th
             -en the random user is User 0
  68   3            uart_msg("You are User 0 \n");
  69   3      
  70   3            // TURN THE LED ON ONCE AND THEN OFF //
  71   3            
  72   3            led = 1; // Turn the LED On
  73   3      
  74   3            startTimer();
  75   3            while(overFlows < 50); // Wait for 50 overflow units
  76   3            endTimer();
  77   3          
  78   3            led = 0; // Turn The Led Off
  79   3          
  80   3          } else if(euclideanDistance1 < euclideanDistance0){ // If Euclidean Distance of User 1 is smaller than U
             -ser 0 then the random user is User 1
  81   3            uart_msg("You are User 1 \n");
  82   3          
  83   3            // TURN THE LED ON AND THEN OFF AND THEN ON AND THEN OFF //
  84   3            
  85   3            led = 1; // Turn the LED on
  86   3            
  87   3            startTimer();
  88   3            while(overFlows < 50); // Wait for 50 overflow units
  89   3            endTimer();
  90   3            
  91   3            led = 0; // Turn the LED off
  92   3            
  93   3            startTimer();
  94   3            while(overFlows < 50); // Wait for 50 overflow units
  95   3            endTimer();
  96   3            
  97   3            led = 1; // Turn the LED on
  98   3            
  99   3            startTimer();
 100   3            while(overFlows < 50); // Wait for 50 overflow units
 101   3            endTimer();
 102   3            
 103   3            led = 0; // Turn the LED off
 104   3            
 105   3          } else { // If both euclidean distance is the same then we cannot know the random user
 106   3            uart_msg("I do not know! \n");
C51 COMPILER V9.59.0.0   UART                                                              11/18/2018 13:45:02 PAGE 3   

 107   3          }
 108   2            
 109   2        }
 110   1      
 111   1        //  while(1);
 112   1          
 113   1      }
 114          
 115          // A method that enables any user to enter .tie5Ronal for testing 
 116          void trainUserX (bit user){
 117   1      
 118   1        unsigned char j;
 119   1        unsigned char i;
 120   1        
 121   1        // First Check That there are no values in avg array by clearing it 
 122   1        for( i = 0; i<9; i++){
 123   2          if(!user){
 124   3            avg0[i] = 0;
 125   3          } else{
 126   3            avg1[i] = 0;
 127   3          }
 128   2        }
 129   1        // For each trial and here we have 5 trials
 130   1        for(j = '0'; j<'5' ; j++){
 131   2          uart_msg("trial ");
 132   2          uart_tx(j);
 133   2          uart_msg("\n");
 134   2          
 135   2          wait4Letter(password[0]); // Wait for '.'
 136   2                    
 137   2          // For each letter and we have 9 letters
 138   2          for( i = 0; i<9;i++){
 139   3                      
 140   3            startTimer(); // Let the timer start so we can count the over flows
 141   3            wait4Letter(password[i+1]); // Wait util the user enters the desired letter
 142   3            endTimer(); // End timer
 143   3            // Add all the overflows of every corresponding character in the 5 trials and we will later on divide t
             -hem by 5(No of Trials)
 144   3            if(!user){ 
 145   4              avg0[i] += (unsigned long)((((unsigned long)overFlows) << 16 ) + (((unsigned long)TH0) << 8) + ((unsig
             -ned long)TL0))/5;
 146   4              //avg0[i] += overFlows/5;
 147   4            } else if(user){
 148   4              avg1[i] += (unsigned long)((((unsigned long)overFlows) << 16) + (((unsigned long)TH0) << 8) + ((unsign
             -ed long)TL0))/5;
 149   4              //avg1[i] += overFlows/5;
 150   4            }
 151   3            overFlows = 0; // Reset overFlows to 0
 152   3              
 153   3          }
 154   2            uart_msg("\n");         
 155   2        }
 156   1        
 157   1      }
 158          
 159          // A method that enables any user to enter .tie5Ronal for testing 
 160          void testingPhase(){
 161   1        
 162   1        unsigned char i;
 163   1      
 164   1        // First Check That there are no values in testing array by clearing it 
 165   1        for( i = 0; i<9; i++){
C51 COMPILER V9.59.0.0   UART                                                              11/18/2018 13:45:02 PAGE 4   

 166   2          testingTimes[i] = 0;
 167   2        }
 168   1      
 169   1        wait4Letter(password[0]); // Wait for '.'
 170   1        
 171   1        // For each letter and we have 9 letters
 172   1        for( i = 0; i<9;i++){
 173   2                      
 174   2          startTimer(); // Start timers so we can count the overflows
 175   2          wait4Letter(password[i+1]); // Wait until random user enter the desired letter 
 176   2          endTimer(); // Stop timer
 177   2                      
 178   2          testingTimes[i] = (unsigned long)((((unsigned long)overFlows) << 16 ) + (((unsigned long)TH0) << 8) + ((
             -unsigned long)TL0));
 179   2          
 180   2          //testingTimes[i] = overFlows;
 181   2          
 182   2          overFlows = 0;
 183   2              
 184   2        }
 185   1        uart_msg("\n");
 186   1        
 187   1      }
 188          
 189          // A method that waits until the desired letter is entered 
 190          void wait4Letter(char x){
 191   1      
 192   1        while(1){
 193   2          char y = uart_rx(); // Get Entered Letter
 194   2          
 195   2          // If the entered letter is as the desired letter then return else then keep looping until desired lette
             -r is entered
 196   2          if(y == x){
 197   3            uart_tx(x);
 198   3            return;
 199   3          }
 200   2          else{
 201   3      //      uart_msg(" Wrong character ! / ");
 202   3          }
 203   2        }
 204   1      }
 205          
 206          // A method that gets the euclidean difference between a ceratin user and the tested user
 207          unsigned long getEuclideanDistance(bit user){
 208   1        unsigned char i;
 209   1      
 210   1        unsigned long euclideanDistance = 0;
 211   1        
 212   1        for(i=0;i<9;i++){
 213   2          
 214   2          if(!user){ // The Euclidean Distance is calculated by squaring the difference between two points
 215   3            //euclideanDistance += (testingTimes[i] - avg0[i])*(testingTimes[i] - avg0[i]);
 216   3            euclideanDistance += (testingTimes[i]>avg0[i])? (testingTimes[i] - avg0[i]) : (avg0[i] - testingTimes[i
             -]) ;
 217   3          } else {
 218   3            //euclideanDistance += (testingTimes[i] - avg1[i]) * (testingTimes[i] - avg1[i]);
 219   3            euclideanDistance += (testingTimes[i]>avg1[i])? (testingTimes[i] - avg1[i]) : (avg1[i] - testingTimes[i
             -]) ;
 220   3          }
 221   2          
 222   2        }
 223   1      
C51 COMPILER V9.59.0.0   UART                                                              11/18/2018 13:45:02 PAGE 5   

 224   1        return euclideanDistance;
 225   1        
 226   1      }
 227          
 228          //String transmission
 229          void uart_msg(char *p){
 230   1        
 231   1        while(*p != 0){
 232   2          uart_tx(*p);
 233   2          p++;
 234   2        }
 235   1        
 236   1        return;
 237   1        
 238   1      }
 239          
 240          // Start the timer so the overFlows are calculated by the interrupts
 241          void startTimer(){
 242   1        overFlows = 0; // Clearing the overFlows
 243   1        TH0 = 0x00; // Restarting the timer high bits of timer 0 
 244   1        TL0 = 0x00; // Restarting the timer low bits of timer 0
 245   1        TR0 = 1; // Start timer 0
 246   1        ET0 = 1; // Enable timer 0 interruprs
 247   1        EA = 1; // Enable Interrupts
 248   1      }
 249          
 250          // Stop the timer
 251          void endTimer(){
 252   1        TR0 = 0; // Stop Timer 0 interrupts
 253   1        ET0 = 0; // Disable Timer 0 interrupts
 254   1        EA = 0; // Disable Interrupts
 255   1      }
 256          
 257          //Initialize UART
 258          void uart_init(){
 259   1         SCON = 0x50;
 260   1         timer_init();
 261   1      }
 262          
 263          // Timer 2 in mode 2 used for initialization of UART
 264          void timer_init(){
 265   1        TMOD = 0x21;
 266   1        TH1 = 0xFD;
 267   1        TR1 = 1;
 268   1      }
 269          
 270          //Transmission function
 271          void uart_tx(char x){
 272   1        SBUF = x;
 273   1        
 274   1        while(!TI);
 275   1        
 276   1        TI = 0;
 277   1      }
 278          
 279          //Receiving function
 280          char uart_rx(){
 281   1        char x;
 282   1        //REN = 1;
 283   1        while(!RI);
 284   1        x = SBUF;
 285   1        RI = 0;
C51 COMPILER V9.59.0.0   UART                                                              11/18/2018 13:45:02 PAGE 6   

 286   1        return x;
 287   1      }
 288          
 289          // A method that detects the interrupts in the timer
 290          void Timer0_ISR(void) interrupt 1 {
 291   1        TR0 = 0;
 292   1        overFlows ++; // Incerement Overflows
 293   1        TH0 = 0x00;
 294   1        TL0 = 0x00;
 295   1        TF0 = 0;
 296   1        TR0 = 1;  
 297   1      }
 298          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1280    ----
   CONSTANT SIZE    =    253    ----
   XDATA SIZE       =    108    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     20      13
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       2
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
